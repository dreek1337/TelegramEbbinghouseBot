from sqlalchemy import select, delete

from aiogram import Dispatcher, Bot
from aiogram import types

from telegram_bot.handlers import other
from telegram_bot.database.models import RepeatInformation
from telegram_bot.handlers.other import replace_symbol, help_message
from telegram_bot.handlers.state import DeleteState, ContentState, SearchInformationState
from telegram_bot.keyboards.inlines import *
from telegram_bot.database.connection import *


async def __show_storage(callback_query: types.CallbackQuery):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    """
    bot: Bot = callback_query.bot
    inline_buttons = (InlineKeyboardMarkup().add(add_repeat_info_button).add(saved_info_button)
                                            .add(clear_stack_and_storage).add(help_button))

    await bot.send_message(callback_query.from_user.id,
                           "üìö –ü–µ—Ä–µ—á–µ–Ω–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º.",
                           reply_markup=inline_buttons)


async def __show_stack(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    bot: Bot = callback_query.bot

    user_stack = [i for i in other.stack if i[1] == callback_query.from_user.id]
    if not user_stack:
        await bot.send_message(callback_query.from_user.id, '‚ùé –û—á–µ—Ä–µ–¥—å, –∫–∞–∫ –∏ –≤–∞—à–∞ –¥—É—à–∞, —á–∏—Å—Ç–∞.',
                               reply_markup=universal_inline_buttons)
    else:
        send_stack = '\n'.join(f'*{str(j)}*' + '\. ' + f'_{replace_symbol(i[0])}_'
                               for j, i in zip(range(1, len(user_stack) + 1), user_stack))

        inline_buttons = (InlineKeyboardMarkup().add(add_repeat_info_button).add(delete_element_from_stack)
                                                .add(clear_stack).add(help_button))

        await bot.send_message(callback_query.from_user.id,
                               send_stack,
                               reply_markup=inline_buttons,
                               parse_mode='MarkdownV2')


async def __clear_stack(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    bot: Bot = callback_query.bot

    other.stack = [i for i in other.stack if i[1] != callback_query.from_user.id]  # –û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–æ –ª—É—á—à–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞

    await bot.send_message(callback_query.from_user.id,
                           '‚úÖ –û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —á–∏—Å—Ç–æ–π –¥—É—à–æ–π.',
                           reply_markup=universal_inline_buttons)


# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
async def __delete_info_from_stack(callback_query: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    """
    bot: Bot = callback_query.bot
    user_stack = [i for i in other.stack if i[1] == callback_query.from_user.id]

    if not user_stack:
        await bot.send_message(callback_query.from_user.id,
                               '‚ùé –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å, –æ—á–µ—Ä–µ–¥—å –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç–∞',
                               reply_markup=universal_inline_buttons)
    else:
        await bot.send_message(callback_query.from_user.id, "üìó –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")

        await DeleteState.header.set()


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
async def __callback_start_repeat(callback_query: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    """
    bot: Bot = callback_query.bot
    await bot.send_message(callback_query.from_user.id, "üìö –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")

    await ContentState.header.set()


# –†–∞–±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
async def __send_all_info(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Ö –Ω–∞–ª–∏—á–∏–µ
    """
    bot: Bot = callback_query.bot

    stmt = (select(RepeatInformation.header)
            .where(RepeatInformation.user_id == callback_query.from_user.id))

    await bot.answer_callback_query(callback_query.id)

    try:
        await bot.send_message(callback_query.from_user.id, '\n'.join(str(j) + '. ' + str(i[0])
                                                                      for j, i in
                                                                      zip(range(
                                                                          1, len(conn.execute(stmt).fetchall()) + 1),
                                                                          conn.execute(stmt).fetchall())),
                               reply_markup=universal_inline_buttons)
    except:
        inline_buttons = InlineKeyboardMarkup().add(add_repeat_info_button).add(help_button)
        await bot.send_message(callback_query.from_user.id,
                               '‚ùé –í–∞—à–∞ –¥—É—à–∞ —á–∏—Å—Ç–∞, –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.',
                               reply_markup=inline_buttons)


# –û—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
async def __clear_storage(callback_query: types.CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    """
    bot: Bot = callback_query.bot

    select_database = select(RepeatInformation).where(RepeatInformation.user_id == callback_query.from_user.id)

    if conn.execute(select_database).fetchall():
        stmt = delete(RepeatInformation).where(RepeatInformation.user_id == callback_query.from_user.id)
        conn.execute(stmt)

        other.stack = [i for i in other.stack if i[1] != callback_query.from_user.id]

        await bot.send_message(callback_query.from_user.id,
                               '‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ.',
                               reply_markup=universal_inline_buttons)
    else:
        inline_buttons = InlineKeyboardMarkup().add(add_repeat_info_button).add(help_button)
        await bot.send_message(callback_query.from_user.id,
                               '‚ùé –í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ —Ç–∞–∫ —É–∂–µ –ø—É—Å—Ç–æ( –ü–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!',
                               reply_markup=inline_buttons)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
async def __send_help(callback_query: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é
    """
    bot: Bot = callback_query.bot
    inline_buttons = InlineKeyboardMarkup().add(add_repeat_info_button).add(search_button)

    await bot.send_message(callback_query.from_user.id,
                           help_message,
                           reply_markup=inline_buttons,
                           parse_mode='MarkdownV2')


# –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
async def __search_info(callback_query: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞, –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    """
    bot: Bot = callback_query.bot

    await bot.send_message(callback_query.from_user.id,
                           "üìó –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–º—É.")

    await SearchInformationState.header.set()


def register_callback_handlers(dp: Dispatcher):

    dp.register_callback_query_handler(__show_storage, lambda c: c.data == 'storage')
    dp.register_callback_query_handler(__show_stack, lambda c: c.data == 'stack')
    dp.register_callback_query_handler(__clear_stack, lambda c: c.data == 'clear_stack')
    dp.register_callback_query_handler(__delete_info_from_stack, lambda c: c.data == 'delete')
    dp.register_callback_query_handler(__callback_start_repeat, lambda c: c.data == 'startrepeat')
    dp.register_callback_query_handler(__send_all_info, lambda c: c.data == 'all_information')
    dp.register_callback_query_handler(__clear_storage, lambda c: c.data == 'clear_storage')
    dp.register_callback_query_handler(__send_help, lambda c: c.data == 'help')
    dp.register_callback_query_handler(__search_info, lambda c: c.data == 'search')