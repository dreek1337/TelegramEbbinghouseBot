import asyncio

from aiogram import types
from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext

from sqlalchemy import select
from telegram_bot.database.models import RepeatInformation

from telegram_bot.handlers.other import replace_symbol, stack, text
from telegram_bot.handlers.state import ContentState, DeleteState, SearchInformationState
from telegram_bot.keyboards.inlines import *
from telegram_bot.database.connection import *


async def __send_welcome(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    bot: Bot = message.bot
    inline_buttons = InlineKeyboardMarkup().add(add_repeat_info_button).add(help_button)

    await bot.send_message(message.from_user.id,
                           text,
                           parse_mode='MarkdownV2',
                           reply_markup=inline_buttons)


async def __send_all_buttons(message: types.Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –±–æ—Ç–µ
    """
    bot: Bot = message.bot
    all_buttons = (InlineKeyboardMarkup().add(add_repeat_info_button).add(delete_element_from_stack)
                   .add(storage_button).add(clear_stack_and_storage).add(saved_info_button).add(search_button).add(stack_button)
                   .add(clear_stack).add(help_button))

    await bot.send_message(message.from_user.id,
                           'üìö –ü—Ä–æ—à—É, –ø–æ–ª—å–∑—É–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ',
                           reply_markup=all_buttons)


async def __send_start_repeat_buttons(message: types.Message):
    """
    –ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
    """
    await message.reply('ü§ì –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?',
                        reply_markup=universal_inline_buttons)


async def __delete_info_from_stack_condition(message: types.Message, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏, –ª–∏–±–æ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    """
    bot: Bot = message.bot

    await state.update_data(header=message.text)

    data = await state.get_data()

    keyword_and_id = data['header'], message.from_user.id

    if keyword_and_id in stack:
        stack.remove(keyword_and_id)

        await bot.send_message(message.from_user.id, f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ¬´{data['header']}¬ª –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.",
                               reply_markup=universal_inline_buttons)
    else:
        await message.answer("‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏!",
                             reply_markup=universal_inline_buttons)

    await state.finish()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
async def __processing_header_and_request_info(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    """
    bot: Bot = message.bot

    await state.update_data(header=message.text)

    await bot.send_message(message.chat.id, "‚ôª –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")

    await ContentState.next()  # –ª–∏–±–æ –∂–µ UserState.information.set()


async def __processing_info(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–¥ –∏ –∑–∞–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    bot: Bot = message.bot

    await state.update_data(information=message.text)

    data = await state.get_data()

    user_id = message.from_user.id
    header = data['header']
    information = data['information']

    session.add(RepeatInformation(
        user_id=user_id,
        header=header,
        information=information
    ))
    session.commit()

    await state.finish()

    stack.append((header, message.from_user.id))

    inline_buttons = InlineKeyboardMarkup().add(help_button)

    await bot.send_message(message.from_user.id,
                           '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é\! *–ö–∞—Ä—Ç–æ—á–∫–∞* —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\.',
                           reply_markup=inline_buttons,
                           parse_mode='MarkdownV2')

    repeat_counts = 0
    repeat_after_times = 1200

    for i in range(5):
        if (header, message.from_user.id) in stack:
            await bot.send_message(message.chat.id,
                                   f"üìö *–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:* __{replace_symbol(header)}__\n\n"
                                   f"‚ôª *–û–ø–∏—Å–∞–Ω–∏–µ:* ||_{replace_symbol(information)}_||",
                                   reply_markup=universal_inline_buttons,
                                   parse_mode='MarkdownV2')
            if repeat_counts < 1:
                await asyncio.sleep(repeat_after_times)
                repeat_counts += 1
                repeat_after_times *= 30
            else:
                await asyncio.sleep(repeat_after_times)
                repeat_after_times *= 3

    try:
        stack.remove((header, message.from_user.id))
    except ValueError:
        pass


# –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞
async def __processing_state_search(message: types.Message, state: FSMContext):
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–¥
    """
    bot: Bot = message.bot

    await state.update_data(header=message.text)

    data = await state.get_data()
    header_and_id = data['header'], message.from_user.id

    stmt = (select(RepeatInformation.header, RepeatInformation.information)
            .where(RepeatInformation.header == header_and_id[0],
                   RepeatInformation.user_id == header_and_id[1]))
    database = set(conn.execute(stmt).fetchall())  # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —ç–¥–µ–º–µ–Ω—Ç–æ–≤

    if database:
        answer_text = '\n'.join(f"{j}\. üìö *–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:* __{replace_symbol(i[0])}__\n\n"
                                f"‚ôª *–û–ø–∏—Å–∞–Ω–∏–µ:* ||_{replace_symbol(i[1])}_||\n"
                                for j, i in zip(range(1, len(database) + 1), database))

        await bot.send_message(message.chat.id,
                               answer_text,
                               reply_markup=universal_inline_buttons,
                               parse_mode='MarkdownV2')
    else:
        inline_buttons = InlineKeyboardMarkup().add(add_repeat_info_button).add(help_button)
        await bot.send_message(message.chat.id,
                               '‚ùé –î–∏—Ç—è, –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –º–Ω–µ –Ω–µ—á–µ–≥–æ —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å!',
                               reply_markup=inline_buttons)

    await state.finish()


async def __echo(message: types.Message):
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    bot: Bot = message.bot
    await bot.send_message(message.from_user.id,
                           'üö´ –û–π, —á—Ç–æ\-—Ç–æ –Ω–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–º\(\(\( –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª *–ü–æ–º–æ—â—å*\.',
                           reply_markup=universal_inline_buttons,
                           parse_mode='MarkdownV2')


def register_message_handlers(dp: Dispatcher):

    dp.register_message_handler(__send_welcome, commands=['start'])
    dp.register_message_handler(__send_all_buttons, commands=['all_buttons'])
    dp.register_message_handler(__send_start_repeat_buttons, commands = ['startrepeat'])
    dp.register_message_handler(__delete_info_from_stack_condition, state=DeleteState.header)
    dp.register_message_handler(__processing_header_and_request_info, state=ContentState.header)
    dp.register_message_handler(__processing_info, state=ContentState.information)
    dp.register_message_handler(__processing_state_search, state=SearchInformationState.header)
    dp.register_message_handler(__echo)
